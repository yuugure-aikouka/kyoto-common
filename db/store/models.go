// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type PartnershipStatus string

const (
	PartnershipStatusPending  PartnershipStatus = "pending"
	PartnershipStatusAccepted PartnershipStatus = "accepted"
	PartnershipStatusRejected PartnershipStatus = "rejected"
)

func (e *PartnershipStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PartnershipStatus(s)
	case string:
		*e = PartnershipStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PartnershipStatus: %T", src)
	}
	return nil
}

type NullPartnershipStatus struct {
	PartnershipStatus PartnershipStatus `json:"partnership_status"`
	Valid             bool              `json:"valid"` // Valid is true if PartnershipStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPartnershipStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PartnershipStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PartnershipStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPartnershipStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PartnershipStatus), nil
}

type Partnership struct {
	UserID1   int32             `json:"user_id_1"`
	UserID2   int32             `json:"user_id_2"`
	CreatedAt time.Time         `json:"created_at"`
	Status    PartnershipStatus `json:"status"`
}

type User struct {
	ID          int32     `json:"id"`
	Username    string    `json:"username"`
	DisplayName string    `json:"display_name"`
	AvatarUrl   string    `json:"avatar_url"`
	IsAi        bool      `json:"is_ai"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}
